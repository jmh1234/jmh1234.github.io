<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on jimh的博客</title>
    <link>http://jmh1234.github.io/tags/java/</link>
    <description>Recent content in Java on jimh的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 05 May 2022 09:31:42 +0800</lastBuildDate><atom:link href="http://jmh1234.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringCloud学习笔记</title>
      <link>http://jmh1234.github.io/2022/springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 05 May 2022 09:31:42 +0800</pubDate>
      
      <guid>http://jmh1234.github.io/2022/springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>微服务   什么是微服务
微服务是一种构建应用的架构方案。微服务架构有别于更为传统的单体式方案，可将应用拆分成多个核心功能。每个功能都被称为一项服务，可以单独构建和部署。
  分布式部署
  微服务应用之间通信 restful api RestTemplate.postForProject .getForProject
  优缺点 good：
  易于开发和维护：一个微服务只会关注一个特定的业务功能，所以业务清晰、代码量较少。开发和 维护单个微服务相对简单。
  单个微服务启动较快
  局部修改容易部署：单一应用只要有修改，就得重新部署整个应用。微服务解决了这样的问题。一 般来说，对某个微服务进行修改，只 需要重新部署这个服务即可。
  技术栈不受限制：在微服务架构中，可以结合项目业务及团队的特点，合理的选择技术栈。
  按需伸缩：更易扩展程序，添加新的功能 bad:
  运维要求高
  分布式固有的复杂性：使用微服务构建的是分布式系统。对于一个分布式系统，系统容错、网络延 迟、分布式事务等都会带来巨大的问 题。
  接口调整成本高：微服务之间通过接口进行通信。如果修改某一个微服务的API，可能所有用到这 个接口的微服务都需要进行调整。
  springCloud  技术栈 服务开发 Spring Boot、Spring、Spring MVC等 服务注册与发现 Eureka、Zookeeper等 服务调用 Rest、RPC等 服务熔断器 Hystrix、Envoy等 负载均衡 Ribbon、Nginx等 服务接口调用(客户端调用服务的简化工具) Feign等 消息队列 Kafka、ActiveMQ等 服务配置中心管理 Spring Cloud Conﬁg等 服务路由（API网关） Zuul等 服务监控 Zabbix、Nagios等 全链路追踪 Zipkin，Brave等 服务部署 Docker、OpenStack等 数据流处理 Spring Cloud Stream（Redis,Rabbit,Kafka等发送接收消息） 事件消息总线 Spring Cloud Bus 什么是springCloud 基于springBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型 中立的开源组件。  eurake eurake显示status 为instanceID</description>
    </item>
    
    <item>
      <title>RabbitMQ详解</title>
      <link>http://jmh1234.github.io/2020/ribbitmq-%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</link>
      <pubDate>Fri, 23 Oct 2020 13:40:13 +0800</pubDate>
      
      <guid>http://jmh1234.github.io/2020/ribbitmq-%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</guid>
      <description>RabbitMQ 实战教程 1.MQ引言 1.1 什么是MQ MQ(Message Quene) : 翻译为 消息队列,通过典型的 生产者和消费者模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 消息中间件	通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。
1.2 MQ有哪些 当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发RocketMQ等。
1.3 不同MQ特点 # 1.ActiveMQ ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎! # 2.Kafka Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费， 追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求， 适合产生大量数据的互联网服务的数据收集业务。 # 3.RocketMQ RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起 源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消 息推送、日志流式处理、binglog分发等场景。 # 4.RabbitMQ RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和 发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在 其次。  RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。
  2.RabbitMQ 的引言 2.1 RabbitMQ  基于AMQP协议，erlang语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。
 官网: https://www.rabbitmq.com/
官方教程: https://www.rabbitmq.com/#getstarted
# AMQP 协议 AMQP（advanced message queuing protocol）`在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型: 2.2 RabbitMQ 的安装 2.2.1 下载 官网下载地址: https://www.rabbitmq.com/download.html![image-20190925220115235](/RibbitMQ/image-20190925220115235.png)
 最新版本: 3.</description>
    </item>
    
    <item>
      <title>Java内存区域与内存溢出</title>
      <link>http://jmh1234.github.io/2020/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Fri, 18 Sep 2020 15:26:08 +0800</pubDate>
      
      <guid>http://jmh1234.github.io/2020/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</guid>
      <description>&lt;p&gt;Java 和 C++ 之间有一堵由内存分配和垃圾收集技术所围成的“高墙”，墙外的想进去，墙内的人想出去&lt;br&gt;
                                                                                                                                 《深入理解Java虚拟机》&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HashMap详解</title>
      <link>http://jmh1234.github.io/2020/hashmap%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 17 Sep 2020 11:52:23 +0800</pubDate>
      
      <guid>http://jmh1234.github.io/2020/hashmap%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;本文解析 HashMap 的源码中的一些常见的问题，以及 JDK1.7 和 JDK1.8 中的差异。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>genericity</title>
      <link>http://jmh1234.github.io/2020/genericity/</link>
      <pubDate>Sat, 05 Sep 2020 11:05:18 +0800</pubDate>
      
      <guid>http://jmh1234.github.io/2020/genericity/</guid>
      <description>&lt;p&gt;Java语言中泛型是“假”泛型！！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>try-catch-finally-return</title>
      <link>http://jmh1234.github.io/2020/try-catch-finally-return/</link>
      <pubDate>Sun, 30 Aug 2020 18:07:45 +0800</pubDate>
      
      <guid>http://jmh1234.github.io/2020/try-catch-finally-return/</guid>
      <description>&lt;p&gt;本文将介绍有 return 的情况下 try-catch-finally 的执行顺序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot项目部署以及负载均衡</title>
      <link>http://jmh1234.github.io/2020/spring-boot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
      <pubDate>Fri, 28 Aug 2020 10:07:45 +0800</pubDate>
      
      <guid>http://jmh1234.github.io/2020/spring-boot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
      <description>&lt;p&gt;本文主要介绍Spring Boot 项目的三种部署方式以及使用 Nginx 作为负载均衡器进行流量转发。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
